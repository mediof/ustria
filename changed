#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 27 13:15:26 2019

@author: mehdi
"""


from __future__ import print_function
import pyzbar.pyzbar as pyzbar
import numpy as np
import cv2
import time
from djitellopy import Tello
import os
import sys
import socket
import threading
#from imutils import path
import imutils

def find_marker(frame):
        gray = cv2.cvtColor(frame,cv2.COLOR_RGB2GRAY)
        blur= cv2.GaussianBlur(gray,(5,5),0)
        edge = cv2.Canny(blur , 35,125)
        cnts = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
        s = imutils.grab_contours(cnts)
        max(cnts, key = cv2.contourArea)
        return cv2.minAreaRect(c)

def distance_to_camera(knownWidth, focalLength, perWidth):
	# compute and return the distance from the maker to the camera
	return (knownWidth * focalLength) / perWidth
# initialize the known distance from the camera to the object, which
# in this case is 24 inches
KNOWN_DISTANCE = 96.0
 
# initialize the known object width, which in this case, the piece of
# paper is 12 inches wide
KNOWN_WIDTH = 10.0
 
# load the furst image that contains an object that is KNOWN TO BE 2 feet
# from our camera, then find the paper marker in the image, and initialize
# the focal lengt


tello_address = ('192.168.10.1', 8889)
local_address = ('', 9000)
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind(local_address)

def send(message, delay):

  try:
    sock.sendto(message.encode(), tello_address)
    print("Sending message: " + message)
  except Exception as e:
    print("Error sending: " + str(e))

  time.sleep(delay)

def receive():

  while True:

    try:
      response, ip_address = sock.recvfrom(128)
      print("Received message: " + response.decode(encoding='utf-8'))
    except Exception as e:

      sock.close()
      print("Error receiving: " + str(e))
      break


tello = Tello()

S = 20
FPS = 120

distanceThreshold = 250


speed = 10

currentScreenshot = 1

def decode(im):
    # Find barcodes and QR codes
    decodedObjects = pyzbar.decode(im)
    # Print results
    for obj in decodedObjects:
        print('Type : ', obj.type)
        print('Data : ', obj.data, '\n')
        if obj.data == "3" :
            send("command",3)
            time.sleep(2)
            send("land", 5)

        
    return decodedObjects


font = cv2.FONT_HERSHEY_SIMPLEX
counterLeft = 0
counterRight = 0
counterUp = 0
counterDown = 0

def takePicture ():
    os.system("screencapture screenshot" + str(currentScreenshot) + ".png")
    currentScreenShot = currentScreenshot + 1

if not tello.connect():
    print("Tello not connected")
    sys.exit()

if not tello.set_speed(speed):
    print("Not set speed to lowest possible")
    sys.exit()

# In case streaming is on. This happens when we quit this program without the escape key.
if not tello.streamoff():
    print("Could not stop video stream")
    sys.exit()

if not tello.streamon():
    print("Could not start video stream")
    sys.exit()

print ("Current battery is " + tello.get_battery())

frame_read = tello.get_frame_read()
stop = False

        
send("command",3)
time.sleep(2)
send("takeoff", 5)
        
        
while not stop:

    frame = frame_read.frame
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gaus = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 115, 1)
    marker=find_marker(frame)
    focalLength = (marker[1][0] * KNOWN_DISTANCE) / KNOWN_WIDTH
    
    decodedObjects = decode(gaus)

    for decodedObject in decodedObjects:
        points = decodedObject.polygon
    cv2.imshow("Video", frame)
    key = cv2.waitKey(1)
    if key == ord('q'):
        break

tello.land()
tello.streamoff()
cv2.destroyAllWindows()
sys.exit()
